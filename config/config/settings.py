"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os.path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Creating configuration file for Database, MQTT, Kafka and other credentials
config_file = os.path.join(BASE_DIR, 'config', 'config.py')
if not os.path.exists(config_file):
    file = open(config_file, 'w')
    file.write("# environment mode \nDEBUG_MODE = False\n\n")
    file.write(
        """# Database credentials \nDB_CONFIG = {\n\t'host': "",\n\t'port': "",\n\t'user': "",\n\t'password': "",\n\t'db': "",\n}\n\n""")
    file.write(
        """# MQTT credentials\nMQTT_CONFIG = {\n\t'broker': "",\n\t'port': "",\n\t'user': "",\n\t'password': "",\n}\n\n""")
    file.write(
        """# Kafka credentials\nhost = ''\nport = ''\nKAFKA_CONFIG = {\n\t'bootstrap_servers': f"{host}:{port}",\n}\n""")
    file.close()
    raise ValueError("Set configuration in 'config/config.py' file.")
else:
    from . import config

    # Check DEBUG_MODE
    if not hasattr(config, 'DEBUG_MODE'):
        raise ValueError("Please set debug configuration (DEBUG_MODE) in 'config/config.py' file.")

    # Setup Database
    if hasattr(config, 'DB_CONFIG'):
        DB_CONFIG = config.DB_CONFIG
        db_host = DB_CONFIG.get('host')
        db_port = DB_CONFIG.get('port')
        db_user = DB_CONFIG.get('user')
        db_password = DB_CONFIG.get('password')
        db_name = DB_CONFIG.get('db')

        if db_host and db_port and db_user and db_password and db_name:
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.mysql',
                    'NAME': db_name,
                    'USER': db_user,
                    'PASSWORD': db_password,
                    'HOST': db_host,
                    'PORT': db_port,
                }
            }
        else:
            raise ValueError(
                "Please provide host, port, user, password and db_name in DB_CONFIG in 'config/config.py' file.")
    else:
        raise ValueError("Please set db configuration (DB_CONFIG) in 'config/config.py' file.")

    # Check MQTT_CONFIG
    if hasattr(config, 'MQTT_CONFIG'):
        MQTT_CONFIG = config.MQTT_CONFIG
        mqtt_broker = MQTT_CONFIG.get('broker')
        mqtt_port = MQTT_CONFIG.get('port')
        mqtt_username = MQTT_CONFIG.get('user')
        mqtt_password = MQTT_CONFIG.get('password')
        if not mqtt_broker or not mqtt_port or not mqtt_username or not mqtt_password:
            raise ValueError(
                "Please provide broker, port, user and password in MQTT_CONFIG in 'config/config.py' file.")
    else:
        raise ValueError("Please set mqtt configuration (MQTT_CONFIG) in 'config/config.py' file.")

    # Check KAFKA_CONFIG
    if not hasattr(config, 'host') and not hasattr(config, 'port'):
        raise ValueError("Please set host and port configuration in 'config/config.py' file for Kafka.")
    if hasattr(config, 'KAFKA_CONFIG'):
        KAFKA_CONFIG = config.KAFKA_CONFIG
        bootstrap_servers = KAFKA_CONFIG.get('bootstrap_servers')
        if not bootstrap_servers:
            raise ValueError("Please provide host and port in KAFKA_CONFIG in 'config/config.py' file.")
    else:
        raise ValueError("Please set Kafka configuration (KAFKA_CONFIG) in 'config/config.py' file.")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q!u*mhzt-@y4k#(2rmd!no9^3&0!lox+=5o3x75-5#f2a*s@wh'

# Setting Logs
# https://docs.djangoproject.com/en/4.1/topics/logging/
LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] {%(funcName)s:%(lineno)d} : %(message)s'
            # 'format': '%(asctime)s [%(levelname)s] {%(pathname)s:%(lineno)d} : %(message)s'
        },
    },
    'handlers': {
        'probus_log': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'probus_logs.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50MB
            'backupCount': 5,
            'formatter': 'standard'
        },
        'django_log': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'django_logs.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50MB
            'backupCount': 5,
            'formatter': 'standard'
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        '': {
            'handlers': ['probus_log', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['django_log', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.DEBUG_MODE

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # django apps
    'django_extensions',

    # Apps
    'config',
    'web_application',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# # Database
# # https://docs.djangoproject.com/en/4.1/ref/settings/#databases
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Indian Standard Time (Asia/Kolkata)
TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True
USE_L10N = True
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = BASE_DIR / 'staticfiles'

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User model ProbusUser
AUTH_USER_MODEL = 'config.ProbusUser'

